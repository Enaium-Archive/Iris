import cn.enaium.sma.SMA
import cn.enaium.sma.utils.FileUtils
import cn.enaium.transform.ITransform
import cn.enaium.sma.SrgMappingAnalyze

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'https://maven.enaium.cn' }
    }

    dependencies {
        classpath "cn.enaium:transform:1.2"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
        classpath "cn.enaium:SrgMappingAnalyze:0.3"

    }
}

apply plugin: "java"
apply plugin: "net.ltgt.apt-idea"
apply plugin: "cn.enaium.transform"

group 'cn.enaium'
version '1.0'
def id = "iris"
def cf4mVersion = "1.5.2"
def mcVersion = "21w11a"
def mapping = new File(System.getProperty("user.dir"), "mapping/${mcVersion}_srg.txt").getPath()

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://libraries.minecraft.net/' }
    maven { url 'https://maven.enaium.cn/' }
    maven { url 'https://repo.spongepowered.org/maven' }
}

dependencies {
    implementation('net.minecraft:launchwrapper:1.12') { transitive = false }
    implementation('org.spongepowered:mixin:0.8') { transitive = false }
    implementation('org.ow2.asm:asm-tree:6.2')
    implementation('org.ow2.asm:asm-commons:6.2')
    implementation('org.ow2.asm:asm-util:6.2')
    implementation('cn.enaium.cf4m:cf4m:1.5.2') { transitive = false }

    compileOnly files("./libs/${mcVersion}_DeObf.jar")
    implementation annotationProcessor('cn.enaium:SrgMappingAnalyze:0.3')

    implementation('com.mojang:patchy:1.1')
    implementation('oshi-project:oshi-core:1.1')
    implementation('net.java.dev.jna:jna:4.4.0')
    implementation('net.java.dev.jna:platform:3.4.0')
    implementation('com.ibm.icu:icu4j:66.1')
    implementation('com.mojang:javabridge:1.0.22')
    implementation('net.sf.jopt-simple:jopt-simple:5.0.3')
    implementation('io.netty:netty-all:4.1.25.Final')
    implementation('com.google.guava:guava:21.0')
    implementation('org.apache.commons:commons-lang3:3.5')
    implementation('commons-io:commons-io:2.5')
    implementation('commons-codec:commons-codec:1.10')
    implementation('net.java.jinput:jinput:2.0.5')
    implementation('net.java.jutils:jutils:1.0.0')
    implementation('com.mojang:brigadier:1.0.17')
    implementation('com.mojang:datafixerupper:4.0.26')
    implementation('com.google.code.gson:gson:2.8.0')
    implementation('com.mojang:authlib:2.1.28')
    implementation('org.apache.commons:commons-compress:1.8.1')
    implementation('org.apache.httpcomponents:httpclient:4.3.3')
    implementation('commons-logging:commons-logging:1.1.3')
    implementation('org.apache.httpcomponents:httpcore:4.3.2')
    implementation('it.unimi.dsi:fastutil:8.2.1')
    implementation('org.apache.logging.log4j:log4j-api:2.8.1')
    implementation('org.apache.logging.log4j:log4j-core:2.8.1')
    implementation('org.lwjgl:lwjgl:3.2.2')
    implementation('org.lwjgl:lwjgl-jemalloc:3.2.2')
    implementation('org.lwjgl:lwjgl-opengl:3.2.2')
    implementation('org.lwjgl:lwjgl-glfw:3.2.2')
    implementation('org.lwjgl:lwjgl-stb:3.2.2')
    implementation('org.lwjgl:lwjgl-tinyfd:3.2.2')
    implementation('org.lwjgl:lwjgl:3.2.2')
    implementation('com.mojang:text2speech:1.11.3')
    implementation('ca.weblite:java-objc-bridge:1.0.0')
}

transformTask {
    SMA.INSTANCE.parseMapping(FileUtils.read(mapping))
    SrgMappingAnalyze.putRemap(false)
}

transformExtend {
    transform = new ITransform() {
        @Override
        byte[] transform(byte[] basic) {
            return SrgMappingAnalyze.accept(basic)
        }
    }
}

compileJava.finalizedBy(transformTask)

compileJava {
    options.compilerArgs << "-Acn.enaium.sma.SrgMapping=$mapping"
    options.compilerArgs << "-Acn.enaium.sma.refmap=mixins.iris.refmap.json"
}

processResources {
    filesMatching('profile.json') {
        expand([
                'version'      : project.version,
                'name'         : rootProject.name,
                'group'        : project.group,
                'id'           : "${id}",
                "mcVersion"    : "${mcVersion}",
                'cf4mVersion'  : "${cf4mVersion}",
                'formattedTime': new Date().format("yyyy-MM-dd'T'HH:mm:ss'-08:00'")
        ])
    }
}

jar {
    manifest {
        attributes([
                "Main-Class"              : "${project.group}.${id}.launch.Main",
                "Specification-Title"     : "${rootProject.name}",
                "Specification-Vendor"    : "Enaium",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : "${rootProject.name}",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "${project.group}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives jar
}